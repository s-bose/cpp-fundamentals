Exercise 18:

1. Design a simple class Base, offering a default, copy, and a move constructor.
Then design a simple class Derived, inheriting from Base. Derived's constructors (default, copy, and move) are as simple as possible.

Show what happens if you call each of Derived's constructors. Explain your finding

> With just empty body, all the Derived constructors implicitly call Base's default constructor first, then the rest of the Derived
constructor body.

2. change Derived's constructors so that each calls the matching Base constructor.

> Since the default constructor does not need any additional parameters we don't need to explicitly call Base's default constructor from Derived's default constructor.
For copy, we pass 'Derived const &other' to Base's copy constructor to copy the inner Base object from other to the current object.
For move, we have to pass 'Derived &&tmp' through 'std::move' to turn it into rvalue before passing it to Base's move constructor.

The resulting definitions look like this.

    Derived::Derived(Derived &other)
    : Base(other)
    {}

    Derived::Derived(Derived &&tmp)
    : Base(std::move(tmp))
    {}


3. what would you have to do to ensure that Derived's copy constructor calls Base's move constructor?

> To turn 'Derived const &other' to an rvalue we first cast it to non-const reference which allows us to make it movable using 'std::move',
thus turning it into rvalue and call Base's move constructor.

    Derived::Derived(Derived const &other)
    : Base(std::move(const_cast<Derived &>(other)))
    {}


4. how would you realize that Derived's move constructor calls Base's copy constructor?

> By simply passing 'Derived &&tmp' to Base's constructor turns tmp into an lvalue and thus, Base's copy constructor is called.


    Derived::Derived(Derived &&tmp)
    : Base(tmp)
    {}
