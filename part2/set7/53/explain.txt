Exercise 53:

Extend the previous program so that it uses multiple clients.

We create a functor class called Consumer which stores the distinct filename(s) and writes to the
file each line it pops from the shared queue.

**Addendum**
The implementation is almost the same as the last one, since the entry-point of producer & consumer's critical 
section (i.e, pushing and popping the queue) is made thread-safe, it can support multiple threads.

The consumer is turned into a functor, which contains a line count that increments for each line it consumes,
along with the filename associated with that thread, where it writes its share of lines.
Each consumer thread, when not able to get any line, will, instead of sleeping, yield and allow other consumer
threads to take over.




