// Generated by Flexc++ V2.11.00 on Fri, 15 Apr 2022 14:07:40 +0200

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "scannerbase.h"
#include <unordered_map>

// $insert classHead
class Scanner: public ScannerBase
{
    std::string d_operator;

    public:
        static std::unordered_map<std::string, int> s_symbols;

        explicit Scanner(std::istream &in = std::cin, std::ostream &out = std::cout);
        
        // $insert lexFunctionDecl
        int lex();
        double getCurrOp();

    private:
        int lex_();
        int executeAction_(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum_ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
        int opAssign(std::string const &str);
        int opComp(std::string const &str);
        int opLogicShift(std::string const &str);
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out)
:
    ScannerBase(in, out)
{}


inline void Scanner::preCode() 
{
    // optionally replace by your own code
}

inline void Scanner::postCode([[maybe_unused]] PostEnum_ type) 
{
    // optionally replace by your own code
}

inline void Scanner::print() 
{
    print_();
}


#endif // Scanner_H_INCLUDED_

